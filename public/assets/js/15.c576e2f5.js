(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{499:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d973f26dd8d348b68bf7cfc5427744e9~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("  接着基础篇，进阶篇将从 webpack.config.js 文件入手，将配置内容展开，一步步介绍 webpack 是如何工作。将从以下五个方面由浅入深展示 webpack：")]),s._v(" "),n("p",[n("strong",[s._v("入口(entry)")])]),s._v(" "),n("p",[n("strong",[s._v("出口(output)")])]),s._v(" "),n("p",[n("strong",[s._v("预处理器(loader)")])]),s._v(" "),n("p",[n("strong",[s._v("插件(plugins)")])]),s._v(" "),n("p",[n("strong",[s._v("模式(mode)")])]),s._v(" "),n("p",[s._v("在开始之前先问自己一个问题："),n("strong",[s._v("webpack 源文件从哪里来，组装完成之后的产出又要交给谁？")])]),s._v(" "),n("hr"),s._v(" "),n("h2",{attrs:{id:"入口-出口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#入口-出口"}},[s._v("#")]),s._v(" 入口&出口")]),s._v(" "),n("h3",{attrs:{id:"资源处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资源处理"}},[s._v("#")]),s._v(" 资源处理")]),s._v(" "),n("p",[s._v("  webapck 故事的开始从指定一个或多个入口开始，这是故事的起源，如果 webpack 是一棵树，那么入口就相当于一棵树的根。事实上也确实如此，webapck 会从入口文件开始检索，并将具有依赖关系的模块生成一颗依赖树，最终生成一个 chunk(字面意思是代码块，在 webpack 中可以理解成被抽象和包装过后的一些模块)。由 chunk 得到的打包产物我们一般称之为 bundle,它们关系如下：")]),s._v(" "),n("p",[n("strong",[s._v("entry -> module -> bundle")])]),s._v(" "),n("h3",{attrs:{id:"入口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#入口"}},[s._v("#")]),s._v(" 入口")]),s._v(" "),n("p",[s._v("在 webpack 通过 context，entry 两个配置项共同决定入口文件的位置。配置入口的时，实际上做了两件事情：")]),s._v(" "),n("ol",[n("li",[s._v("确定入口位置")]),s._v(" "),n("li",[s._v("定义 chunk name")])]),s._v(" "),n("h4",{attrs:{id:"context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[s._v("#")]),s._v(" context")]),s._v(" "),n("blockquote",[n("p",[s._v("基本目录，一个绝对路径，用于从配置中解析入口点和加载器\ncontext 可以理解成资源入口的路径前缀，在配置时必须使用绝对路径的形式，而且它必须是字符串。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const path = require('path');\n\nmodule.exports = {\n  context: path.resolve(__dirname, './src')\n  enrty: './compontens/index.js\n};\nmodule.exports = {\n  context: path.resolve(__dirname, './src/compontens')\n  enrty: './index.js\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("这两个等价，主要是为了让 entry 更加简洁。context 可以省略～")]),s._v(" "),n("h4",{attrs:{id:"entry"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entry"}},[s._v("#")]),s._v(" entry")]),s._v(" "),n("p",[s._v("与 context 必须是字符串不同，entry 可以是字符串、数组、对象、函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("string [string] object = { <key> string | [string] | object = { import string | [string], dependOn string | [string], filename string }} (function() => string | [string] | object = { <key> string | [string] } | object = { import string | [string], dependOn string | [string], filename string })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ol",[n("li",[s._v("字符串")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('module.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "./bundle.js"\n  },\n  mode: "development",\n};\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("数组类型\n说明：传数组作用是将多个资源文件预先合并，在打包时 webpack 会将数组中的最后一个元素作为实际的入口路径。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = {\n  entry: ['react', './src/index.js'],\n  output: {\n    filename: \"./bundle.js\"\n  },\n  mode: \"development\",\n};\n等同于\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: \"./bundle.js\"\n  },\n  mode: \"development\",\n};\n\nindex.js\nimport 'react',\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("3.对象类型\n如果想要定义多入口，则必须使用对象类型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = {\n  entry: {\n  \tindex: './src/index.js',\n    lib: './src/lib.js',\n  },\n};\n\n对象值也可以是数组\nmodule.exports = {\n  entry: {\n  \tindex: ['react', './src/index.js'],,\n    lib: './src/lib.js',\n  },\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("ol",{attrs:{start:"4"}},[n("li",[s._v("函数类型\n函数类型支持异步操作，动态加载")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = {\n  entry: () => ({\n  \tindex: ['react', './src/index.js'],,\n    lib: './src/lib.js',\n  }),\n};\n\n异步\nmodule.exports = {\n  entry: () => new Promise((resolve) => {\n  \tsetTimeout(() => {\n    \tresolve('./src/index.js')\n    })\n  }),\n};\n动态加载\nmodule.exports = {\n  entry() {\n  \t// 从外部源（远程服务器，文件系统内容或数据库）获取实际条目\n    return fetchPathsFromSomeExternalSource();\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h4",{attrs:{id:"vendor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vendor"}},[s._v("#")]),s._v(" vendor")]),s._v(" "),n("p",[s._v("当项目体积越来越大时，一旦代码更新，即便很小改动。用户都要下载整个资源文件，对性能很不友好，为了解决这个问题，我们可以使用提取"),n("strong",[s._v("vendor")]),s._v("方法。vendor 是供应商对意思，在 webpack 中一般指的是第三方模块集中打包而产生对 bundle。提取 vendor")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = {\n  entry: {\n  \tindex: './src/index.js',\n    vendor: ['react','react-dom','react-redux'],\n  },\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("我们进行了 vendor 提取，那么问题来了，我们并没有为 vendor 设置入口路径，webpack 要如何打包呢？这时候我们可以使用"),n("strong",[s._v("optimization.splitChunks")]),s._v(",将 index 和 vendor 中的公共模块提取出来。通过这样的配置，index 产生的 bundle 将只包含业务模块，而其依赖的第三方模块将被抽取出来形成一个新的 bundel，这样就达到了我们提取 vendor 的目的。而由于这部分不会经常变动，因此可以有效的利用客户端缓存，在后续请求页面时会加快整体的渲染速度。")]),s._v(" "),n("h3",{attrs:{id:"出口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#出口"}},[s._v("#")]),s._v(" 出口")]),s._v(" "),n("p",[s._v("  出口的配置项多达十余种，这里只详细将几种常用的配置项。先看简单的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    filename: 'my-first-webpack.bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/dist/',\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h4",{attrs:{id:"filename"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filename"}},[s._v("#")]),s._v(" filename")]),s._v(" "),n("p",[s._v("filename 作用是输出资源的文件名，其形式是字符串，看简单例子如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("output: {\n    filename: 'bundle.js',\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("当然它还可以是文件路径：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("output: {\n    filename: './dist/bundle.js',\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("我们也可以为每个 bundle 指定不同的名字，webpack 使用类似模版语言动态的生成文件名：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("output: {\n    filename: '[name].js',\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("如果要控制客户端缓存，最好加上[chunkhash],因为每个 chunk 所产生的 chunkhash 只与自身内容有关，单个内容的改变不会影响其他资源，可以精准的让客户端缓存得到更新。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("output: {\n    filename: '[name]@[chunkhash].js',\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"path"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[s._v("#")]),s._v(" path")]),s._v(" "),n("p",[s._v("path 指定资源输出位置，它的值必须是绝对路径。看例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    filename: 'my-first-webpack.bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("例子中将输出路径设置为 dist 目录，webpack4 之后，打包路径默认设置成 dist 目录")]),s._v(" "),n("h4",{attrs:{id:"publicpath"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#publicpath"}},[s._v("#")]),s._v(" publicPath")]),s._v(" "),n("p",[s._v("publicPath 容易与 path 混淆")]),s._v(" "),n("p",[s._v("path 是指定"),n("strong",[s._v("文件输出位置")]),s._v("\n而 publicPath 是指定"),n("strong",[s._v("资源的请求位置")])]),s._v(" "),n("h3",{attrs:{id:"实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),n("h4",{attrs:{id:"单入口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单入口"}},[s._v("#")]),s._v(" 单入口")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const path = require('path');\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'), // webpack4之后默认配置可省略\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h4",{attrs:{id:"多入口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多入口"}},[s._v("#")]),s._v(" 多入口")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const path = require('path');\n\nmodule.exports = {\n  entry: {\n  \tpageA: './src/pageA.js',\n    pageB: './src/pageB.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, 'dist'), // webpack4之后默认配置可省略\n  }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"预处理器-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预处理器-loader"}},[s._v("#")]),s._v(" 预处理器 (loader)")]),s._v(" "),n("p",[s._v("  回顾之前的内容，我们讨论的都是如何进行 javascript 的打包，但是，一个项目不可能只要 javascript 文件，项目中的 html，css, less, scss, 图片，字体，模版等等 webpack 是怎么处理的呢？webpack 是如何对预编译同一管理的呢？\nloader，它赋予了 webpack 处理不同资源类型的能力，大大丰富了 webpack 的可扩展性")]),s._v(" "),n("p",[s._v("  对于 webpack 来说，一切都是模块，我们可以像加载 js 一样去加载 css，可以在同一个 js 文件中去维护 js 和 css 文件。模块是具有高内聚及可复用性的结构，通过 webapck"),n("strong",[s._v("一切皆模块")]),s._v("的思想，我们可以将这些特性应用到每一种静态资源上面。那么我们一起来揭开 loader 的面纱吧～")]),s._v(" "),n("h3",{attrs:{id:"什么是-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-loader"}},[s._v("#")]),s._v(" 什么是 loader")]),s._v(" "),n("p",[s._v("在正式开始前先让我们了解一下 loader 是什么？其实每个 loader 在本质上都是一个函数。在 webpack4 之前，函数的输入输出都必须为字符串；在 webpack4 之后，loader 也同时支持抽象语法树（AST）的传递，通过这样的方法来减少重复代码的解析。")]),s._v(" "),n("p",[s._v("output = loader(input)")]),s._v(" "),n("p",[s._v("这里的 input 可能是工程文件的字符串，也可能是上一个 loader 转化的结果，loader 是链式的")]),s._v(" "),n("p",[s._v("output = loaderA（loaderB（loaderC（input）））；")]),s._v(" "),n("p",[s._v("让我们看下 loader 源码结构")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = function loader (content, map, meta) {\n    var callback = this.async();\n    var result = handle(content, map, meta);\n\n    callback(\n    \tnull,\n        result.content, // 转换后的内容\n        result.map, // 转换后的 source-map\n        result.meta, // 转换后的AST\n    )\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("可以看出 loader 本身就是一个函数，在该函数中对接受到的内容进行转换。")]),s._v(" "),n("h3",{attrs:{id:"从打包一个-css-文件开始"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从打包一个-css-文件开始"}},[s._v("#")]),s._v(" 从打包一个 css 文件开始")]),s._v(" "),n("p",[s._v("我们在 src 目录下添加 main.css 文件，目录结构如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" └─ webpackDemo ························ sample root dir\n    ├── src ·································· source dir\n+   │   └── main.css ························· main styles\n\t│\t└── index.js ························· index js\n    ├── package.json ························· package file\n    └── webpack.config.js ···················· webpack config file\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("main.css")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/* ./src/main.css */\nbody {\n  margin: 0 auto;\n  padding: 100px;\n  background: yellowgreen;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("然后在 index.js 中引入 css")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import HelloWorld from "./hello-world";\nimport "./main.css";\n\ndocument.write("My first webpack app <br />");\nHelloWorld();\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("配置完成过后回到命令行终端再次运行 Webpack 打包命令，此时你会发现命令行报出了一个模块解析错误，如下所示：\n"),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d50126110ae45818132bde283214130~tplv-k3u1fbpfcp-watermark.image",alt:""}}),s._v("\nwebapck 无法处理 css 语法，所以抛出来一个错误，并且提示需要一个合适的 loader 来处理这种文件：\n需要的是一个可以加载 CSS 模块的 Loader，最常用到的是 css-loader。我们需要通过 npm 先去安装这个 Loader，然后在配置文件中添加对应的配置，具体操作和配置如下所示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('$ npm install css-loader --save-dev\n# or yarn add css-loader --dev\n\nmodule.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "./bundle.js"\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 根据打包过程中所遇到文件路径匹配是否使用这个 loader\n        use: "css-loader" // 指定具体的 loader\n      }\n    ]\n  },\n  mode: "development",\n  devServer: {\n    publicPath: "./dist" // 在后面会说publicPath是什么意思\n  }\n};\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("在配置对象的 module 属性中添加一个 rules 数组。这个数组就是我们针对资源模块的加载规则配置，其中的每个规则对象都需要设置两个属性：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("首先是 test 属性，它是一个正则表达式，用来匹配打包过程中所遇到文件路径，这里我们是以 .css 结尾；")])]),s._v(" "),n("li",[n("p",[s._v("然后是 use 属性，它用来指定匹配到的文件需要使用的 loader，这里用到的是 css-loader。")])])]),s._v(" "),n("p",[s._v("配置完成之后在执行打包命令就不会出错了,流程如下：")]),s._v(" "),n("p",[s._v("css -> css-loader -> webpack -> bundle")]),s._v(" "),n("p",[s._v("但是这时候你会发现虽然打包成功来，但是 css 样式并没有生效，这是因为 css-loader 的作用仅仅是处理 css 的各种加载语法。如果要让 css 起作用，还需要 style-loader 来把样式插入页面，要 css-loader 和 style-loader 联合起来使用\n同样的，我们先安装 style-loader")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('$ npm install style-loader --save-dev\n# or yarn add style-loader --dev\n\nmodule.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "./bundle.js"\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 根据打包过程中所遇到文件路径匹配是否使用这个 loader\n        // 对同一个模块使用多个 loader，注意顺序\n        use: ["style-loader", "css-loader"]\n      }\n    ]\n  },\n  mode: "development",\n  devServer: {\n    publicPath: "./dist" // 在后面会说publicPath是什么意思\n  }\n};\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("配置完成之后，再次回到命令行重新打包，此时 bundle.js 文件中会额外多出两个模块。style-loader 的作用总结一句话就是，将 css-loader 中所加载到的所有样式模块，通过创建 style 标签的方式添加到页面上。")]),s._v(" "),n("blockquote",[n("p",[s._v("别忘记重新 npm run build!")])]),s._v(" "),n("p",[s._v("这样样式就会生效来，可以看到 style 标签，包含 css 样式，这样我们就完成来从 js 文件加载 css 文件的配置")]),s._v(" "),n("h3",{attrs:{id:"exclude-include"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exclude-include"}},[s._v("#")]),s._v(" exclude & include")]),s._v(" "),n("p",[s._v("这里介绍一下 loader 的两个相关配置\nexclude 的含义是，所以被正则匹配到的模块都被排除在改规则外，例如")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('rules: [\n  {\n    test: /\\.css$/, // 根据打包过程中所遇到文件路径匹配是否使用这个 loader\n    // 对同一个模块使用多个 loader，注意顺序\n    use: ["style-loader", "css-loader"],\n    exclude: /node_modules/,\n  }\n]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("node_modules 就被排除在外来，exclude 一般在配置时是必加的，不然会拖慢整体的打包速度")]),s._v(" "),n("p",[s._v("include 代表的则是该规则只对正则匹配到对模块生效。例如我们将 include 设置为源码 src 目录，自然也就排除了 node_modules。\n如果同时存在，exclude 优先级更高。")]),s._v(" "),n("h3",{attrs:{id:"常用-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用-loader"}},[s._v("#")]),s._v(" 常用 loader")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("babel-loader https://webpack.js.org/loaders/babel-loader\nhtml-loader  https://webpack.js.org/loaders/html-loader\nfile-loader\t https://webpack.js.org/loaders/file-loader\nurl-loader\t https://webpack.js.org/loaders/url-loader\nstyle-loader https://webpack.js.org/loaders/style-loader\ncss-loader\t https://webpack.js.org/loaders/css-loader\nsass-loader\t https://webpack.js.org/loaders/sass-loader\npostcss-loader\thttps://webpack.js.org/loaders/postcss-loader\neslint-loader\thttps://github.com/webpack-contrib/eslint-loader\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"自定义-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-loader"}},[s._v("#")]),s._v(" 自定义 loader")]),s._v(" "),n("p",[s._v("有时候现有 loader 不能满足我们的要求，这时候需要我们对其进行修改，现在让我们从头到位实现一个 loader。\n这里我的需求是开发一个可以加载 markdown 文件的加载器，以便可以在代码中直接导入 md 文件。我们都应该知道 markdown 一般是需要转换为 html 之后再呈现到页面上的，所以我希望导入 md 文件后，直接得到 markdown 转换后的 html 字符串，")]),s._v(" "),n("p",[s._v("每个 Webpack 的 Loader 都需要导出一个函数，这个函数就是我们这个 Loader 对资源的处理过程，它的输入就是加载到的资源文件内容，输出就是我们加工后的结果。我们通过 source 参数接收输入，通过返回值输出。")]),s._v(" "),n("h4",{attrs:{id:"第一步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一步"}},[s._v("#")]),s._v(" 第一步")]),s._v(" "),n("p",[s._v("引入 loader 有两种形式，npm 安装，直接引入；")]),s._v(" "),n("p",[s._v("这里直接在项目根目录下创建一个 markdown-loader.js 文件，完成后你可以把这个模块发布到 npm 上作为一个独立的模块使用。\n了解了 Loader 大致的工作机制过后，我们再回到 markdown-loader.js 中，接着完成我的需求。这里需要安装一个能够将 Markdown 解析为 HTML 的模块，叫作 marked。\n然后通过 marked 去解析我们的 markdown 语法，解析完的结果就是一段 HTML 字符串。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// ./markdown-loader.js\nconst marked = require(\"marked\");\nmodule.exports = source => {\n  // 1. 将 markdown 转换为 html 字符串\n  const html = marked(source);\n  // html => '<h1>About</h1><p>this is a markdown file.</p>'\n  // 2. 将 html 字符串拼接为一段导出字符串的 JS 代码\n  const code = `module.exports = ${JSON.stringify(html)}`;\n  return code;\n  // code => 'export default \"<h1>About</h1><p>this is a markdown file.</p>\"'\n};\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"第二步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二步"}},[s._v("#")]),s._v(" 第二步")]),s._v(" "),n("p",[s._v("创建 md 文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\x3c!-- ./src/markdown.md --\x3e\n# markdown\nthis is a markdown file.\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("在 index.js 文件中引入 md 文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import markdown from "./markdown.md";\ndocument.write(markdown);\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("接下来修改配置，引入 loader")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('module.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "./bundle.js"\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 根据打包过程中所遇到文件路径匹配是否使用这个 loader\n        // 对同一个模块使用多个 loader，注意顺序\n        use: ["style-loader", "css-loader"]\n      },\n      {\n        test: /\\.md$/,\n        // 直接使用相对路径\n        use: "./markdown-loader.js"\n      }\n    ]\n  },\n  mode: "development",\n  devServer: {\n    publicPath: "./dist" // 在后面会说publicPath是什么意思\n  }\n};\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h4",{attrs:{id:"第三步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三步"}},[s._v("#")]),s._v(" 第三步")]),s._v(" "),n("p",[s._v("执行打包命令，并打开浏览器预览")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm run build\nnpm run dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("可以看到正确显示出了 markdowm 语法：\n"),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e511d18207b4bc8a21ea3bca3f20f39~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),n("h4",{attrs:{id:"多个-loader-的配合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个-loader-的配合"}},[s._v("#")]),s._v(" 多个 Loader 的配合")]),s._v(" "),n("p",[s._v("我们还可以尝试一下刚刚说的第二种思路，就是在我们这个 markdown-loader 中直接返回 HTML 字符串，然后交给下一个 Loader 处理。这就涉及多个 Loader 相互配合工作的情况了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// ./markdown-loader.js\nconst marked = require('marked')\nmodule.exports = source => {\n  // 1. 将 markdown 转换为 html 字符串\n  const html = marked(source)\n  return html\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("然后我们再安装一个处理 HTML 的 Loader，叫作 html-loader，代码如下所示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('npm install html-loader --save-dev\n\nmodule.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "./bundle.js"\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 根据打包过程中所遇到文件路径匹配是否使用这个 loader\n        // 对同一个模块使用多个 loader，注意顺序\n        use: ["style-loader", "css-loader"]\n      },\n      {\n        test: /\\.md$/,\n        // 直接使用相对路径\n        use: ["html-loader", "./markdown-loader"]\n      }\n    ]\n  },\n  mode: "development",\n  devServer: {\n    publicPath: "./dist" // 在后面会说publicPath是什么意思\n  }\n};\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("安装完成再进行打包，编译，你会发现代码仍然能够正常运行。")]),s._v(" "),n("p",[s._v("loader 是 webpack 的核心功能之一，有了 loader，webpack 才可以去加载你想加载的资源。")]),s._v(" "),n("h2",{attrs:{id:"插件-plugins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插件-plugins"}},[s._v("#")]),s._v(" 插件(plugins)")]),s._v(" "),n("p",[s._v("Loader 是负责完成项目中各种各样资源模块的加载，从而实现整体项目的模块化，而 Plugin 则是用来解决项目中除了资源模块打包以外的其他自动化工作，所以说 Plugin 的能力范围更广，用途自然也就更多。\n那我们能用插件做什么？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("实现自动在打包之前清除 dist 目录（上次的打包结果）；\n自动生成应用所需要的 HTML 文件；\n根据不同环境为代码注入类似 API 地址这种可能变化的部分；\n拷贝不需要参与打包的资源文件到输出目录；\n压缩 Webpack 打包完成后输出的文件；\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("现在让我们走进常用插件")]),s._v(" "),n("h3",{attrs:{id:"clean-webpack-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clean-webpack-plugin"}},[s._v("#")]),s._v(" clean-webpack-plugin")]),s._v(" "),n("p",[s._v("你可能已经发现，Webpack 每次打包的结果都是直接覆盖到 dist 目录。而在打包之前，dist 目录中就可能已经存入了一些在上一次打包操作时遗留的文件，当我们再次打包时，只能覆盖掉同名文件，而那些已经移除的资源文件就会一直累积在里面，最终导致部署上线时出现多余文件，这显然非常不合理。")]),s._v(" "),n("p",[s._v("更为合理的做法就是在每次完整打包之前，自动清理 dist 目录，这样每次打包过后，dist 目录中就只会存在那些必要的文件。")]),s._v(" "),n("h4",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm install clean-webpack-plugin --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("安装完成之后在 webpack.config.js 引入文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const { CleanWebpackPlugin } = require("clean-webpack-plugin");\n\nmodule.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "./bundle.js"\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 根据打包过程中所遇到文件路径匹配是否使用这个 loader\n        // 对同一个模块使用多个 loader，注意顺序\n        use: ["style-loader", "css-loader"]\n      },\n      {\n        test: /\\.md$/,\n        // 直接使用相对路径\n        use: ["html-loader", "./markdown-loader"]\n      }\n    ]\n  },\n  plugins: [new CleanWebpackPlugin()],\n  mode: "development",\n  devServer: {\n    publicPath: "./dist" // 在后面会说publicPath是什么意思\n  }\n};\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("OK，现在让我们测试一下，重新打包看是否删除 dist 文件，你可以在 bundle 加些内容，看打包之后是否清空。")]),s._v(" "),n("h3",{attrs:{id:"html-webpack-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#html-webpack-plugin"}},[s._v("#")]),s._v(" html-webpack-plugin")]),s._v(" "),n("p",[s._v("项目发布时，我们需要同时发布根目录下的 HTML 文件和 dist 目录中所有的打包结果，非常麻烦，而且上线过后还要确保 HTML 代码中的资源文件路径是正确的。\n如果打包结果输出的目录或者文件名称发生变化，那 HTML 代码中所对应的 script 标签也需要我们手动修改路径。")]),s._v(" "),n("p",[s._v("解决这两个问题最好的办法就是让 Webpack 在打包的同时，自动生成对应的 HTML 文件，让 HTML 文件也参与到整个项目的构建过程。这样的话，在构建过程中，Webpack 就可以自动将打包的 bundle 文件引入到页面中。")]),s._v(" "),n("h4",{attrs:{id:"安装-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm install html-webpack-plugin --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("安装完成之后在 webpack.config.js 引入文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const HtmlWebpackPlugin = require('html-webpack-plugin')\nplugins: [\n  new CleanWebpackPlugin(),\n  new HtmlWebpackPlugin()\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("最后我们回到命令行终端，再次运行打包命令，此时打包过程中就会自动生成一个 index.html 文件到 dist 目录。我们找到这个文件，可以看到文件中的内容就是一段使用了 bundle.js 的空白 HTML，具体结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>Webpack App</title>\n  <meta name="viewport" content="width=device-width, initial-scale=1"></head>\n  <body>\n  <script src="./bundle.js"><\/script></body>\n</html>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("我们还可以对 HtmlWebpackPlugin 进行配置:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      title: "Webpack Plugin Sample",\n      meta: {\n        viewport: "width=device-width"\n      }\n    })\n  ],\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"自定义-plugins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-plugins"}},[s._v("#")]),s._v(" 自定义 plugins")]),s._v(" "),n("p",[s._v("前面我们简单的实现了一个 loader，知道了 loader 的基本原理：")]),s._v(" "),n("ul",[n("li",[s._v("Loader 导出一个函数")]),s._v(" "),n("li",[s._v("经过函数内部对参数源文件的处理返回一个字符串")])]),s._v(" "),n("p",[s._v("那么我们如何编写一个 plugins 呢？")]),s._v(" "),n("p",[n("strong",[s._v("钩子机制")])]),s._v(" "),n("p",[s._v("Webpack 的插件机制就是我们在软件开发中最常见的钩子机制\n钩子机制也特别容易理解，它有点类似于 Web 中的事件。或者说 react,vue 中的生命周期。\n为了便于插件的扩展，Webpack 几乎在每一个环节都埋下了一个钩子。这样我们在开发插件的时候，通过往这些不同节点上挂载不同的任务，就可以轻松扩展 Webpack 的能力。")]),s._v(" "),n("p",[s._v("具体有哪些预先定义好的钩子，我们可以参考官方文档的 API：")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://webpack.js.org/api/compiler-hooks/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Compiler Hooks"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://webpack.js.org/api/compilation-hooks/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Compilation Hooks"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://webpack.js.org/api/parser/",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavascriptParser Hooks"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("感兴趣的可以去了解一些，现在让我们实现能够自动清除 Webpack 打包结果中的注释的插件。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8166586a2a64475781a43aad5f27612a~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),n("h4",{attrs:{id:"第一步-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一步-2"}},[s._v("#")]),s._v(" 第一步")]),s._v(" "),n("p",[s._v("在根目录新建 remove-comments-plugin.js 文件")]),s._v(" "),n("p",[s._v("Webpack 要求我们的插件必须是"),n("strong",[s._v("一个函数或者是一个包含 apply 方法的对象")]),s._v("，一般我们都会定义一个类型，在这个类型中定义 apply 方法。然后在使用时，再通过这个类型来创建一个实例对象去使用这个插件。\n这里定义一个 RemoveCommentsPlugin 类型，然后在这个类型中定义一个 apply 方法，这个方法会在 Webpack 启动时被调用，它接收一个 compiler 对象参数，这个对象是 Webpack 工作过程中最核心的对象，里面包含了我们此次构建的所有配置信息，我们就是通过这个对象去注册钩子函数，具体代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// ./remove-comments-plugin.js\nclass RemoveCommentsPlugin {\n  apply (compiler) {\n    console.log('RemoveCommentsPlugin 启动')\n    // compiler => 包含了我们此次构建的所有配置信息\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"第二步-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二步-2"}},[s._v("#")]),s._v(" 第二步")]),s._v(" "),n("p",[s._v("如何删除打包文件的注释呢？是不是应该先等打包完成之后再去执行这个钩子函数？\n所以我们使用一个叫作 emit 的钩子，这个钩子会在 Webpack 即将向输出目录输出文件时执行。\n通过 compiler 对象的 hooks 属性访问到 emit 钩子，再通过 tap 方法注册一个钩子函数，这个方法接收两个参数：")]),s._v(" "),n("ul",[n("li",[s._v("第一个是插件的名称，我们这里的插件名称是 RemoveCommentsPlugin；")]),s._v(" "),n("li",[s._v("第二个是要挂载到这个钩子上的函数；")])]),s._v(" "),n("p",[s._v("我们先 for in 打印看一下每一个文件的名称")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// ./remove-comments-plugin.js\n\nclass RemoveCommentsPlugin {\n  apply(compiler) {\n    console.log("MyPlugin 启动");\n\n    compiler.hooks.emit.tap("RemoveCommentsPlugin", compilation => {\n      // compilation => 可以理解为此次打包的上下文\n\n      for (const name in compilation.assets) {\n        console.log(name); // 输出文件名称\n      }\n    });\n  }\n}\nmodule.exports = RemoveCommentsPlugin;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("在 weback.config.js 引入插件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const RemoveCommentsPlugin = require("./remove-comments-plugin");\n\nplugins: [\n    new RemoveCommentsPlugin(),\n  ],\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("运行之后可以看到正确执行了我们插件文件内容\n"),n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae175e1945fb4fbc8cabc10a0b7b5add~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),n("h4",{attrs:{id:"第三步-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三步-2"}},[s._v("#")]),s._v(" 第三步")]),s._v(" "),n("p",[s._v("能够拿到文件名和文件内容后，我们回到代码中。这里需要先判断文件名是不是以 .js 结尾，因为 Webpack 打包还有可能输出别的文件，而我们的需求只需要处理 JS 文件。")]),s._v(" "),n("p",[s._v("我们将文件内容得到，再通过正则替换的方式移除掉代码中的注释，最后覆盖掉 compilation.assets 中对应的对象，在覆盖的对象中，我们同样暴露一个 source 方法用来返回新的内容。另外还需要再暴露一个 size 方法，用来返回内容大小，这是 Webpack 内部要求的格式，具体代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// ./remove-comments-plugin.js\nclass RemoveCommentsPlugin {\n  apply(compiler) {\n    compiler.hooks.emit.tap("RemoveCommentsPlugin", compilation => {\n      // compilation => 可以理解为此次打包的上下文\n\n      for (const name in compilation.assets) {\n        if (name.endsWith(".js")) {\n          const contents = compilation.assets[name].source();\n\n          const noComments = contents.replace(/\\/\\*{2,}\\/\\s?/g, "");\n\n          compilation.assets[name] = {\n            source: () => noComments,\n\n            size: () => noComments.length\n          };\n        }\n      }\n    });\n  }\n}\nmodule.exports = RemoveCommentsPlugin;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("运行命令，查看 bundle\n"),n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96403cab445c45f9b2b24fb8c6ec927b~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),n("p",[s._v("清除成功，通过自己实现插件我们发现关键点就是使用生命周期钩子中挂载任务函数去完成一个插件点实现。")]),s._v(" "),n("h2",{attrs:{id:"模式-mode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模式-mode"}},[s._v("#")]),s._v(" 模式(mode)")]),s._v(" "),n("p",[s._v("通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。\n传递 mode 的方式\n第一种，在 webpack.config.js 中设置 mode 值")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = {\n  mode: 'production'\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("或者从 CLI 参数中传递：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("webpack --mode=development\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果没有设置，webpack 会给 mode 的默认值设置为 production\n我们可以通过 mode 进行开发环境的配置，来设置不同环境的相关配置。")]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("进阶篇从五个核心配置属性展开，介绍了 webpack 基本配置。webpack 属性不可能全部介绍完，更重要的是对它们对理解，知道其实现的基本原理，举一反三，能够做到心中有数～")]),s._v(" "),n("h2",{attrs:{id:"本文章的编写参考了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本文章的编写参考了"}},[s._v("#")]),s._v(" 本文章的编写参考了")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=88#/detail/pc?id=2260",target:"_blank",rel:"noopener noreferrer"}},[s._v("Webpack 原理与实践"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://book.douban.com/subject/34430881/",target:"_blank",rel:"noopener noreferrer"}},[s._v("webapck 实战"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"相关系列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关系列"}},[s._v("#")]),s._v(" 相关系列")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6897817213534502920",target:"_blank",rel:"noopener noreferrer"}},[s._v("Webpack 基础篇"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=t.exports}}]);