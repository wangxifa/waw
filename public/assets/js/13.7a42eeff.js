(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{497:function(e,s,a){"use strict";a.r(s);var n=a(4),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticStyle:{"font-size":"16px","word-spacing":"2px","letter-spacing":"2px","font-family":"'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif","background-image":"linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%)","background-size":"20px 20px"}},[a("div",[a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d973f26dd8d348b68bf7cfc5427744e9~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("  最近一直在学习 Webpack，以前也断断续续的学习过 Webpack 相关知识，但总是零零散散的，于是想着在这里进行一个学习总结，那么我们开始吧～")]),e._v(" "),a("h2",{attrs:{id:"什么是-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-webpack"}},[e._v("#")]),e._v(" 什么是 Webpack")]),e._v(" "),a("p",[e._v("我们先看看"),a("a",{attrs:{href:"https://www.webpackjs.com/concepts/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),a("OutboundLink")],1),e._v("是怎么定义的：")]),e._v(" "),a("blockquote",[a("p",[e._v("本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle")])]),e._v(" "),a("p",[e._v("  简单来说 Webpack 是一个现代的 JavaScript 模块打包工具，它能够解决各模块之间的依赖，并且把各个模块按照特定的规则和顺序组织在一起，最终合并成一个或者多个 js 文件。这个过程就是模块打包。")]),e._v(" "),a("p",[e._v("  我们可以把 Webpack 理解成一个模块加工厂。它接受源代码，并对其进行加工等一系列操作，最终产出资源文件，等待出厂送往用户。")]),e._v(" "),a("h2",{attrs:{id:"使用-webpack-的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-webpack-的意义"}},[e._v("#")]),e._v(" 使用 Webpack 的意义")]),e._v(" "),a("p",[e._v("  在 web 开发中，我们通常用的无非是 HTML, CSS, JS 等静态资源，那我们为什么不把工程中的源文件直接发布到服务器而是要交给 webpack 进行处理呢？其实开发一个简单的 web 应用这样确实没问题（依稀还记得以前某某大佬直接用记事本进行开发的故事～）因为以前需求很简单，但是当应用规模大了，就必须要借助一定的工具了，所谓"),a("strong",[e._v("工欲善其事，必先利其器")]),e._v("就是这个道理了。")]),e._v(" "),a("p",[e._v("那使用 Webpack 的意义是什么呢？我理解的是它能够让我们使用"),a("strong",[e._v("模块化的方式进行应用程序的开发")])]),e._v(" "),a("h3",{attrs:{id:"什么是模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是模块"}},[e._v("#")]),e._v(" 什么是模块")]),e._v(" "),a("p",[e._v("其实我们每时每刻都在和模块打交道，一个 npm 包，一个 js 文件我们都能够称之为模块。我们可以把模块理解为医院中的不同部门，每一个都要其特定的功能，而各个部门协同工作，才能使医院正常运转。")]),e._v(" "),a("h3",{attrs:{id:"js-模块的发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-模块的发展"}},[e._v("#")]),e._v(" js 模块的发展")]),e._v(" "),a("p",[e._v("其实在 js 设计之初是没有模块这个概念的，如果工程中有多个 js 文件，我们只能通过 javaSript 标签将它们一个一个插入到页面中。而随着业务的不断发展，这种需要手动维护 js 加载顺序的方式越来越困难了，并且每个 script 标签的顶层作用域就是全局作用域，如果没有任何处理直接在代码中进行变量或者函数声明，就会造成全局作用域的污染。而模块化解决了这些问题。")]),e._v(" "),a("h3",{attrs:{id:"模块化规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化规范"}},[e._v("#")]),e._v(" 模块化规范")]),e._v(" "),a("p",[e._v("（1）common.js")]),e._v(" "),a("ul",[a("li",[e._v("把每个文件都单独区分成一个模块，与最初使用 script 形式引入文件都方式不同，script 都顶层作用域是全局作用域，在变量声明都时候可能会污染全局变量，而后者会形成一个属于模块自身都作用域，所有都变量以及函数只能自身能访问")]),e._v(" "),a("li",[e._v("模块内部会有一个 module 对象用于存放当前模块信息，module.exports 用来指定对外暴露哪些内容")]),e._v(" "),a("li",[e._v("模块使用 require 进行方法导入")])]),e._v(" "),a("p",[e._v("（2）ES6 Module")]),e._v(" "),a("ul",[a("li",[e._v("ES6 Module 也是把每个文件作为一个模块，每个模块拥有自身都作用域，不同是导入，导出语句。import 和 export 也作为保留关键字加入了进来，作为导入导出关键字。")]),e._v(" "),a("li",[e._v("导出有两种导出方式：命名导出和默认导出")])]),e._v(" "),a("p",[e._v("（3）AMD")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("它是有 js 社区提出都专注与浏览器端模块化都标准，它与之前两种方式都模块最大都区别是它是异步都。")])]),e._v(" "),a("li",[a("p",[e._v("在 AMD 中使用 define 函数来定义模块，它可以接受三个参数。第一个参数是当前模块都 id，相当于模块名。第二个参数是当前模块都依赖，第三个参数用来描述模块都导出值，可以是函数或对象。如果是函数则导出都是函数都返回值；如果是对象则导出对象本身。如果在当前模块中需要向外部导出成员，可以通过 return 的方式实现。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// AMD 定义模块\ndefine([], function() {\n  return {}\n})\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])])])]),e._v(" "),a("p",[e._v("（4）UMD")]),e._v(" "),a("ul",[a("li",[e._v("严格来说 UMD 是一组模块形式都集合。通用模块标准它都目标是使一个模块能运行在各种环境下")])]),e._v(" "),a("h2",{attrs:{id:"如何开始一个-webpack-工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何开始一个-webpack-工程"}},[e._v("#")]),e._v(" 如何开始一个 webpack 工程")]),e._v(" "),a("div",{staticStyle:{"background-color":"rgba(255,229,100,.3)","border-color":"#e7c000",color:"#",padding:".1rem 1.5rem","border-left-width":".5rem","border-left-style":"solid",margin:"1rem 0"}},[a("p",{staticClass:"custom-block-title"},[e._v("前提条件")]),e._v(" "),a("p",[e._v("\n    Webpack 对 "),a("a",{staticStyle:{color:"#3eaf7c"},attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js")]),e._v(" >版本有一定要求，推荐使用Node.js的LTS（long Term Suppor 长期维护）使用新版本的node和新版本的webpack对性能优化有很大提升，相对于老版本，最大提速可达90%。所以推荐使用最新的稳定版本。\n  ")])]),e._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[e._v("  如果采用"),a("strong",[e._v("全局安装")]),e._v("，那么在与他人进行协作的时候，由于每个人系统中 webpack 的版本不同，"),a("strong",[e._v("可能会导致输出结果不一致")]),e._v("。部分依赖于 webpack 的插件会调用项目中 webpack 的内部模块，这种情况下仍然需要在本地安装，而如果本地和全局都有，则会造成混淆")]),e._v(" "),a("p",[e._v("所以这里我们选择在工程内部安装 Webpack 的方式。首先在桌面创建一个项目并初始化项目")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mkdir webpackDemo\ncd webpackDemo\nnpm init 或者 # yarn init\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("接下来执行安装 Webpack 的命令")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install webpack webpack-cli --save-dev\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8757ee720fc436e9a166277b1cf759c~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),e._v(" "),a("p",[e._v("  这样就安装好了，webpack 是我们要用的核心模块，webpack-cli 是命令行工具。查看是否安装成功可以使用 npx webpack -v; npx webpack-cli -v；如果显示版本号即安装成功；\n为啥使用 npx 呢？因为我们把 webpack 安装到了本地，因此无法直接在命令行直接使用 webpack 命令，npx 会帮助我们在当前项目的 node_modules 目录里面去找 webpack,所以通过 npx 就可以在本地找到这个安装包并执行。")]),e._v(" "),a("h3",{attrs:{id:"打包第一个应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包第一个应用"}},[e._v("#")]),e._v(" 打包第一个应用")]),e._v(" "),a("p",[e._v("首先我们在工程根目录创建 index.html， src 文件夹，并在 src 文件夹创建 index.js 文件和 hello-world.js 文件")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mkdir src\ncd src\ntouch index.js\ntouch hello-world.js\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("index.js")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import HelloWorld from "./hello-world";\n\ndocument.write("My first webpack app <br />");\nHelloWorld();\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("hello-world.js")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('export default function() {\n  document.write("Hello World");\n}\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("index.html")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n    <title>My first webpack app</title>\n  </head>\n  <body>\n    <script src="./dist/bundle.js"><\/script>\n  </body>\n</html>\n\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("p",[e._v("这时候我们使用命令")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npx wenpack\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在打开 index.html 文件就能看到页面上会显示")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("My first webpack app\nHello World\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h3",{attrs:{id:"配置-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-webpack"}},[e._v("#")]),e._v(" 配置 webpack")]),e._v(" "),a("p",[e._v("首先我们要知道 webpack 并不能直接打包你的项目，如果你能直接打包，其实是 webpack 团队默认做了配置文件，现在我们自己来写一个基础的配置文件，webapck 默认配置文件为 webpack.config.js,我们来创建这个文件，并添加代码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('module.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "bundle.js"\n  },\n  mode: "development"\n};\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("我们平时使用 react 或者 vue 的时候常用的是 npm run 命令来进行 webpack 打包，那么接下来我们时候配置 npm script")]),e._v(" "),a("p",[e._v("在 package.json 文件中")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"scripts": {\n    - "test": "echo \\"Error: no test specified\\" && exit 1",\n    + "build": "webpack",\n  }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("现在让我们删掉 dist 打包文件重新执行命令")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm run build\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("我们看到 webpack 执行了打包命令，重新生成了 dist 打包文件")]),e._v(" "),a("h3",{attrs:{id:"webpack-dev-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server"}},[e._v("#")]),e._v(" webpack-dev-server")]),e._v(" "),a("p",[e._v("每次修改文件都要重新执行打包，感觉开发调试效率并不高。以往只要编辑项目，刷新就行，现在多了一步打包。那怎么优化呢？\n社区为我们提供了一个快捷的本地开发工具--webpack-dev-server。用一下命令进行安装：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install webpack-dev-server --save-dev\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("安装完成我们在 package.json 文件中添加 script 配置文件")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"scripts": {\n     "build": "webpack",\n   + "dev": "webpack-dev-server"\n  }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("最后我们还需要对 webpack.congif.js 进行配置")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('module.exports = {\n  entry: "./src/index.js",\n  output: {\n    filename: "bundle.js"\n  },\n  mode: "development",\n  devServer: {\n    publicPath: "/dist" // 在后面会说publicPath是什么意思\n  }\n};\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("  webpack-dev-server 可以看成是一个服务者，它对主要任务是接受浏览器对请求，然后将资源返回。当启动服务当时候，会先让 webpack 进行模块打包并将资源准备好（这里当资源文件就是 bundle.js）当 webpack-dev-server 接受浏览器请求时，它会先进行 url 地址校验。如果该地址是资源服务地址（我们配置当 publicPath）,就会从 webpack 打包中寻找该资源并返回给浏览器。反之，如果请求地址不属于资源服务地址，则直接读取硬盘中当源文件将其返回，所以这就是为什么有时候你打开 index.html 文件会返回源文件当原因。")]),e._v(" "),a("p",[e._v("接下来我们执行")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm run dev\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这时候命令行提示报错了 Error: Cannot find module 'webpack-cli/bin/config-yargs'\n这是由于 webpack-cli 的新版本对 webpack-dev-server 版本的不兼容，我们之前对版本是：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"webpack": "^5.6.0",\n"webpack-cli": "^4.2.0",\n"webpack-dev-server": "^3.11.0"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("我们先把 webpack-cl 删除,再安装指定版本")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm uninstall webpack-cli -D\nnpm install webpack-cli@^3.3.12 --save-dev\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("这时候我们在执行命令会发现 webpack 正常运行了。\n打开"),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("本地 ulr"),a("OutboundLink")],1),e._v("就可以看到页面正常显示了。")]),e._v(" "),a("p",[e._v("或者直接使用：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"scripts": {\n   - "dev": "webpack-dev-server"\n   + "dev": "webpack-dev-server --open"\n  }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("  看完 Webpack 基础篇我们对 webpack 有了基本的了解，知道它是什么，它能做什么，如何使用 webpack 进行项目开发，知道了 webpack-dev-server 的基本用法。那么基础知识已经搭建完成，接下来准备进入 Webpack 进阶篇，开始了解如何使用和编写模块，进一步加深对 webpack 的理解～")])])])])}),[],!1,null,null,null);s.default=t.exports}}]);